//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Inputs/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""65d8c2ed-49ed-46cd-b55f-68f281f600e8"",
            ""actions"": [
                {
                    ""name"": ""Mouvement"",
                    ""type"": ""Value"",
                    ""id"": ""895b538e-65db-4396-9f6f-1914190fffef"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tourner"",
                    ""type"": ""Value"",
                    ""id"": ""3ac3ba2b-e168-48c7-b59c-2ed495fb058b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Saut"",
                    ""type"": ""Value"",
                    ""id"": ""2e48aa7a-a787-48b9-8ed3-654192a743bd"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Viser"",
                    ""type"": ""Value"",
                    ""id"": ""afa1105e-53a6-4da7-96f3-959347a9d394"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Clavier"",
                    ""id"": ""ac421f64-9946-4ce2-bf78-aa2c7bae742e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""68680014-f18d-4e17-a784-7bea01337bad"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e570c770-fc75-4786-85ce-0191cca8c2f9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a72f8823-675d-412a-a481-45705607a954"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""84a1cea1-dd53-4ad3-a7a3-ddf2a3109b36"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Manette"",
                    ""id"": ""2023611e-dc7b-4319-9688-4589d5005764"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ddb0cd58-e808-4ebd-9608-40236fe1be44"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""111dcb10-8cf3-4dfe-99e9-41749bdfbde9"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""04a04417-8785-4450-aa77-672afd70133d"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""504418a8-5768-45dc-82a3-aceb58befdbf"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""31d50bf1-f75c-43b2-ae2e-9c9da38dbfa0"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Saut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5bb90cdd-9f48-466c-8f2f-df2161b3343d"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Saut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1dd9807a-00da-42c5-bd54-07f1d4882e3e"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2"",
                    ""groups"": """",
                    ""action"": ""Tourner"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Manette"",
                    ""id"": ""4ac0dc53-3c48-40d1-8aff-9fd107c22af1"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tourner"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6315a1b0-aa66-4e16-b073-4e0089af92a0"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tourner"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""57428864-0c09-4688-bce2-8fec254137ec"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tourner"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""766ed39b-f6c4-4747-a334-8caffb2e837a"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Viser"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Voiture"",
            ""id"": ""90b2faa4-4fcb-4551-9e20-a14698cb8a22"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""7aa8ce7c-d3f3-4b4d-9108-05ff2a358f21"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9ce71575-9365-4c74-8ce6-45a26a0275d4"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Mouvement = m_Player.FindAction("Mouvement", throwIfNotFound: true);
        m_Player_Tourner = m_Player.FindAction("Tourner", throwIfNotFound: true);
        m_Player_Saut = m_Player.FindAction("Saut", throwIfNotFound: true);
        m_Player_Viser = m_Player.FindAction("Viser", throwIfNotFound: true);
        // Voiture
        m_Voiture = asset.FindActionMap("Voiture", throwIfNotFound: true);
        m_Voiture_Newaction = m_Voiture.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Mouvement;
    private readonly InputAction m_Player_Tourner;
    private readonly InputAction m_Player_Saut;
    private readonly InputAction m_Player_Viser;
    public struct PlayerActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mouvement => m_Wrapper.m_Player_Mouvement;
        public InputAction @Tourner => m_Wrapper.m_Player_Tourner;
        public InputAction @Saut => m_Wrapper.m_Player_Saut;
        public InputAction @Viser => m_Wrapper.m_Player_Viser;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Mouvement.started += instance.OnMouvement;
            @Mouvement.performed += instance.OnMouvement;
            @Mouvement.canceled += instance.OnMouvement;
            @Tourner.started += instance.OnTourner;
            @Tourner.performed += instance.OnTourner;
            @Tourner.canceled += instance.OnTourner;
            @Saut.started += instance.OnSaut;
            @Saut.performed += instance.OnSaut;
            @Saut.canceled += instance.OnSaut;
            @Viser.started += instance.OnViser;
            @Viser.performed += instance.OnViser;
            @Viser.canceled += instance.OnViser;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Mouvement.started -= instance.OnMouvement;
            @Mouvement.performed -= instance.OnMouvement;
            @Mouvement.canceled -= instance.OnMouvement;
            @Tourner.started -= instance.OnTourner;
            @Tourner.performed -= instance.OnTourner;
            @Tourner.canceled -= instance.OnTourner;
            @Saut.started -= instance.OnSaut;
            @Saut.performed -= instance.OnSaut;
            @Saut.canceled -= instance.OnSaut;
            @Viser.started -= instance.OnViser;
            @Viser.performed -= instance.OnViser;
            @Viser.canceled -= instance.OnViser;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Voiture
    private readonly InputActionMap m_Voiture;
    private List<IVoitureActions> m_VoitureActionsCallbackInterfaces = new List<IVoitureActions>();
    private readonly InputAction m_Voiture_Newaction;
    public struct VoitureActions
    {
        private @PlayerControls m_Wrapper;
        public VoitureActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Voiture_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Voiture; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VoitureActions set) { return set.Get(); }
        public void AddCallbacks(IVoitureActions instance)
        {
            if (instance == null || m_Wrapper.m_VoitureActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_VoitureActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IVoitureActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IVoitureActions instance)
        {
            if (m_Wrapper.m_VoitureActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IVoitureActions instance)
        {
            foreach (var item in m_Wrapper.m_VoitureActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_VoitureActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public VoitureActions @Voiture => new VoitureActions(this);
    public interface IPlayerActions
    {
        void OnMouvement(InputAction.CallbackContext context);
        void OnTourner(InputAction.CallbackContext context);
        void OnSaut(InputAction.CallbackContext context);
        void OnViser(InputAction.CallbackContext context);
    }
    public interface IVoitureActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
